1 -> INT_NUMBER
+ -> ADD
12 -> INT_NUMBER

1 -> INT_NUMBER
+ -> ADD
13 -> INT_NUMBER

5 -> INT_NUMBER
- -> SUB
2 -> INT_NUMBER

10 -> INT_NUMBER
/ -> DIV
5 -> INT_NUMBER

4 -> INT_NUMBER
* -> MUL
2 -> INT_NUMBER

55 -> INT_NUMBER
% -> REM
23 -> INT_NUMBER

5 -> INT_NUMBER
+ -> ADD
3 -> INT_NUMBER


if -> IF
( -> LP
a -> ID
> -> GT
b -> ID
) -> RP

{ -> LCB

a -> ID
= -> ASSIGN
b -> ID
+ -> ADD
c -> ID
; -> SEMI


} -> RCB  

while -> WHILE
( -> LP
x -> ID
<= -> LE
10 -> INT_NUMBER
) -> RP

{ -> LCB

x -> ID
= -> ASSIGN
y -> ID
+ -> ADD
z -> ID
* -> MUL
q -> ID
/ -> DIV
56.0 -> FLOAT_NUMBER
; -> SEMI

} -> RCB


float -> FLOAT
add -> ID
( -> LP
int -> INT
a -> ID
, -> COMMA
int -> INT
b -> ID
) -> RP

{ -> LCB

float -> FLOAT
c -> ID
= -> ASSIGN
a -> ID
+ -> ADD
b -> ID
* -> MUL
60.0 -> FLOAT_NUMBER
/ -> DIV
4 -> INT_NUMBER
; -> SEMI

float -> FLOAT
x -> ID
= -> ASSIGN
10.0 -> FLOAT_NUMBER
; -> SEMI

int -> INT
y -> ID
= -> ASSIGN
12 -> INT_NUMBER
; -> SEMI



for -> FOR
( -> LP
int -> INT
i -> ID
= -> ASSIGN
10 -> INT_NUMBER
; -> SEMI
i -> ID
>= -> GE
1 -> INT_NUMBER
; -> SEMI
i -> ID
-- -> DEC
; -> SEMI
i -> ID
++ -> INC
) -> RP

{ -> LCB

printf ->  PRINTF
; -> SEMI

} -> RCB


return ->  RETURN
x -> ID
+ -> ADD
y -> ID
; -> SEMI

} -> RCB





